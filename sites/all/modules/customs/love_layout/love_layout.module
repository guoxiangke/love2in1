<?php
/**
 * Implements hook_block_info().
 */
function love_layout_block_info() {
  $blocks = array();
  $blocks['love_user_block'] = array(
    'info' => t('Love User info'),
    //'region' => 'sidebar_first',
  );
  $blocks['love_profile_block'] = array(
    'info' => t('Love User profile'),
    //'region' => 'sidebar_first',
  );
  //Introduce of this sites on user/* page .when not login.
  $blocks['sites_introduce'] = array(
    'info' => t('About Us'),
    'cache' => DRUPAL_NO_CACHE, //to be confirmed
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    //'pages' => 'user\r\nuser/login\r\nuser/register\r\nuser/password',
  );
  $blocks['love_qr_block'] = array(
    'info' =>t('WeiChat-QR'),
    'region' => 'sidebar_second',
  );
  $blocks['love_fm_block'] = array(
    'info' =>t('love_fm_block'),
    'region' => 'sidebar_second',
  );
  $blocks['love_signature'] = array(
    'info' =>t('love_signature'),
    'region' => 'sidebar_second',
  );
  $blocks['love_user_timeline'] = array(
    'info' =>t('love_user_timeline'),
    'region' => 'content',
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function love_layout_block_view($delta = '') {
  module_load_include('inc', 'love_layout', 'love_layout.block');
  $block = array();
  switch ($delta) {
    case 'love_user_block':
      $block['subject'] = NULL;//t('User info')
      $block['content'] = love_block_user_info();
      break;
    case 'sites_introduce':
      $block['title'] = t('About Us');
        //Do not call menu_primary_local_tasks or menu_secondary_local_tasks because it does not output single item...
      $block['content'] = love_block_about_us();
      break;
    case 'love_profile_block':
      $block['subject'] = NULL;//t('User info')
      $block['content'] = love_block_profile_info();
      break;
    case 'love_qr_block':
      $block['subject'] = t('微信关注');
      $block['content'] = love_block_weichat_qr();
      break;
    case 'love_fm_block':
      $block['subject'] = t('婚恋广播').date("(n月j日)");
      $block['content'] = love_fm_block();
      break;
    case 'love_signature':
      $block['subject'] = t('内心独白');
      $block['content'] = love_signature_block();
      break;
    case 'love_user_timeline':
      $block['subject'] = t('时光轴');
      $block['content'] = love_user_timeline();
      break;
  }
  return $block;
}


//TODO 定制最近来访 主题9宫格
/**
 * Implements hook_block_view().
 * @see user_visits_adv_block_view($delta = '')
 */
/**
* Implementation of hook_block_view_MODULE_DELTA_alter
*/
function love_layout_block_view_alter(&$data, $block) {

  if($block->delta == 'my_latest_visitors'){
    global $user;
    $limit = variable_get('user_visits_block_items_' . $block->delta, 12);
    $data['content'] =  user_visits_display_block_4love($user->uid, $limit=12);
  }
//hide two block in user/my page.
  if( $block->module == 'user_relationship_blocks'){
    if( in_array($block->delta , array('user-2-them_to_you','user-2-you_to_them'))){
      $data['content'] = '';
    }
  }
    
}

/**
 * Get latest visitors for block content
 */
function user_visits_display_block_4love($uid = NULL, $limit = 12) {
  $output = "";
  if (!$uid && (arg(0) == 'user' && is_numeric(arg(1)))) {
    $uid = arg(1);
  }

  if ($uid) {
    $visitors = user_visits_latest($uid, $limit); 
    $output .= '<div class="clearfix recent-visits">';
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $account = user_load($visitor->vuid);
        if(isset($account->uid))
        $output .= theme('user_visits_4love', array('account' => $account, 'timestamp' => $visitor->visit));
      }
    }
    $output = theme('user_visits_total', array('total' => user_visits_total($uid))).$output;
    $output .= '</div>';
  }

  return $output;
}
/**
 * Implements of hook_theme().
 */
function love_layout_theme($existing, $type, $theme, $path) {
  return array(
    'user_visits_4love' => array(
      'variables' => array(
        'account'   => NULL,
        'timestamp' => NULL,
        'referer'   => NULL,
      ),
    ),
  );
}

/**
 * Themeable function.
 */
function theme_user_visits_4love($account, $timestamp = NULL, $referer = NULL) {
  $output  = '<div class="recent-visit">' . "\n";
  //$output .= theme('user_picture', array($account));

  $output .= love_layout_template_preprocess_user_picture($account);
  $output .= ' <div class="name">' . theme('username', $account) . '</div>' . "\n";
  /*if ($account['timestamp']) {
    $output .= $account['timestamp'] ? ' <div class="visit">' . t('!time ago', array('!time' => format_interval(REQUEST_TIME - $account['timestamp']))) . '</div>' . "\n" : '';
    $output .= $account['referer'] ? ' <div class="referer">' . t('Referer !link', array('!link' => l($account['referer'], $account['referer']))) . '</div>' . "\n" : '';
  }*/
  $output .= '</div>' . "\n";
  return $output;
}


/**
 * Process variables for user-picture.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account: A user, node or comment object with 'name', 'uid' and 'picture'
 *   fields.
 *
 * @see user-picture.tpl.php
 * @see template_preprocess_user_picture
 */
function love_layout_template_preprocess_user_picture($variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) { 
    $account = $variables['account'];
    if (!empty($account->picture)) {
      // @TODO: Ideally this function would only be passed file objects, but
      // since there's a lot of legacy code that JOINs the {users} table to
      // {node} or {comments} and passes the results into this function if we
      // a numeric value in the picture field we'll assume it's a file id
      // and load it for them. Once we've got user_load_multiple() and
      // comment_load_multiple() functions the user module will be able to load
      // the picture files in mass during the object's load process.
      if (is_numeric($account->picture)) {
        $account->picture = file_load($account->picture);
      }
      if (!empty($account->picture->uri)) {
        $filepath = $account->picture->uri;
      }
      $default = FALSE;
    }
    elseif (variable_get('user_picture_default', '')) {
      $filepath = variable_get('user_picture_default', '');
      $default = TRUE;
    }
    if (isset($filepath)) {
      //$alt = t("@user's picture", array('@user' => format_username($account)));
      $alt ='';
      if(isset($variables['timestamp']))
      $alt = $variables['timestamp'] ?  t('!time ago', array('!time' => format_interval(REQUEST_TIME - $variables['timestamp']))) : '';
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.

      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $style = isset($variables['image_style'])?$variables['image_style']:$style;
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      if (!empty($account->uid) && user_access('access user profiles')) {
        global $user;
        if($user->uid == $account->uid && $default){
          $attributes = array('attributes' => array('title' => t('修改头像')), 'html' => TRUE);
          $variables['user_picture'] = l($variables['user_picture'], "user/$account->uid/edit", $attributes);
        }else{
          $attributes = array('attributes' => array('title' => $account->name), 'html' => TRUE);
          $variables['user_picture'] = l($variables['user_picture'], "user/$account->uid", $attributes);
        
        }
      }
    }
    return $variables['user_picture'];
  }
}

/**
 * Get latest visitors for block content.
 * @see user_visits_adv_visitors_block()
 */
function _love_user_visits_adv_visitors_block($limit = 8) {
  global $user;
  $output = '';

  if ($user->uid) {
    $visitors = user_visits_adv_get('visitors', $user->uid);
    if (is_array($visitors)) {
      $visitors = array_slice($visitors, 0, $limit, TRUE);
      foreach ($visitors as $uid => $visit) {
        $account = db_query('SELECT uid, name, picture FROM {users} WHERE uid = :uid', array(':uid' => $uid))->fetchObject();
        $output .= theme('user_visits', array('account' => $account, 'visit' => $visit));
      }
    }
  }
  return $output;
}

/**
 * Implements hook_modules_installed().
 *
 * @see devel_install()
 */
function love_layout_modules_installed($modules) {
  if (in_array('menu', $modules)) {
    $menu = array(
      'menu_name' => 'love',
      'title' => t('Love menu'),
      'description' => t('Love Navigation Menu'),
    );
    menu_save($menu);
  }
}

/**
 * Implements hook_menu().
 * /statuses/all
 * /statuses/share
 */
function love_layout_menu() {

  // $items['statuses'] = $items['statuses/share'];
  // //  array(
  // //   'title' => t('Statuses'),
  // //   'description' => 'User statuses.',
  // //   'page callback' => '_love_statuses_user_view',
  // //   'page arguments' => array(1),
  // //   'access arguments' => array('Update and view own stream'),
  // //   'type' => MENU_NORMAL_ITEM,
  // //   'menu_name'=> 'main-menu'
  // // );
  // $items['statuses']['menu_name'] = 'main-menu';
  $items['timeline'] = array(
    'title' => 'timeline',
    'page callback'    => 'love_user_timeline',
    'file'             => 'love_layout.block.inc',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' =>'main-menu',
  );
  $items['welcome'] = array(
    'title' => 'Welcome,Please login first!',
    'page callback'    => 'love_anonymous_welcome',
    'access arguments' => array('user_is_anonymous'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'love_layout.pages.inc',

  );

  $items['focus'] = array(
    'title' => 'My focus',
    'page callback'    => 'love_layout_my_focus',
    'access arguments' => array('access user profiles'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'love_layout.pages.inc',
  );
  $items['follow'] = array(
    'title' => 'Follow me',
    'page callback'    => 'love_layout_my_focus',
    'access arguments' => array('access user profiles'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'love_layout.pages.inc',
  );
  $items['friends'] = array(
    'title' => 'My friends',
    'page callback'    => 'love_layout_my_focus',
    'access arguments' => array('access user profiles'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'love_layout.pages.inc',
  );
  return $items;
}
/**
 * Implements hook_user_view().
 * @see statuses_user_view()
 */
function _love_statuses_user_view($account) {
  $items = array();

  if (variable_get('statuses_profile', 1)) {
    $account = user_load($account);
    $value = theme('statuses_form_display', array('recipient' => $account, 'type' => 'user'));
    // Don't show this section if there's nothing there or the user doesn't have permission to see it.
    if (empty($value)) {
      return;
    }
    if (!isset($account->content['statuses'])) {
      $account->content['statuses'] = array();
    }
    $account->content['statuses'] += array(
      '#type' => 'user_profile_category',
      '#attributes' => array('class' => array('statuses-profile-category')),
      '#weight' => -5,
      '#title' => t('Messages'),
    );
    $account->content['statuses']['status'] = array(
      '#type' => 'user_profile_item',
      '#title' => '',
      '#markup' => $value,
      '#attributes' => array('class' => array('statuses profile')),
    );
    return $account->content['statuses'];
  }
}
//$value = theme('statuses_form_display', array('recipient' => $account, 'type' => 'user'));
function love_layout_menu_alter(&$items) {

  //$items['publish'] = $items['node/add/photo'];
  $items['node/add/photo']['title'] = t('+');
  $items['node/add/photo']['menu_name'] = 'main-menu';

  // Example - disable the page at node/add
  $items['messages']['title callback'] = 'privatemsg_title_callback_alter';
  $items['messages/recent'] = $items['messages'];
  $items['messages/recent']['menu_name'] = 'love';
  $items['messages/recent']['title'] = t('Messages');
  //$items['messages/recent']['title callback'] = 'privatemsg_title_callback_alter';


  $items['user']['title'] = t('Myspace');
  $items['user']['menu_name'] = 'love';
  $items['user']['access callback'] = 'user_is_logged_in';

  $items['publish/photo'] = $items['node/add/photo'];
  $items['publish/photo']['title'] = t('上传相片');
  $items['publish/photo']['menu_name'] = 'love';

  $items['invite/others'] = $items['invite'];
  
  $items['invite/others']['title'] = t('邀请熟人');
  $items['invite/others']['menu_name'] = 'love';
  //$items['invite/others']['delivery callback'] = 'ajax_deliver';

  $items['relationships/my'] = $items['relationships'];
  $items['relationships/my']['menu_name'] = 'love';
  $items['relationships/my']['title'] = t('My acquaintances');//熟人

  $items['relationships/my'] = $items['relationships'];
  $items['relationships/my']['menu_name'] = 'love';
  $items['relationships/my']['title'] = t('My acquaintances');//我想认识的

  $items['relationships/my'] = $items['relationships'];
  $items['relationships/my']['menu_name'] = 'love';
  $items['relationships/my']['title'] = t('I am a acquaintance of');//我想认识的
//熟人申请 Sent requests
//发出申请 Received requests
//你们是熟人==
  //加认识 男-女
  //-认识
  //互相认识 转角缘分 
//http://drupal.org/node/1336212#comment-6049694 bug fix when node_add_form in addtional
   $items['file/ajax']['file'] = 'node.pages.inc';
   $items['file/ajax']['file path'] = drupal_get_path('module', 'node');

//
   if(!user_access('administer users')){
    $items['user/%user/invites']['page arguments'] = array('pending', 1);
    ///unset($items['user/%user/invites/expired']);
    //unset($items['user/%user/invites/accepted']);
   }
}
/**
 * multilanguage t() for message.
 * @see privatemsg_title_callback()
 */
function privatemsg_title_callback_alter($title = NULL) {
  $count = privatemsg_unread_count();

  if ($count > 0) {
    //return format_plural($count, 'Messages (1 new)', 'Messages (@count new)');
    return format_plural($count, t('Messages (1 new)'), t('Messages (@count new)'));
  }
  return t('Messages');
}
/**
 * Implements hook_admin_path().
 */
function love_layout_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
  $paths['user/*/edit/main'] = FALSE;
  $paths['user/*/edit/believe'] = FALSE;
  $paths['node/add/*'] = FALSE;

  $paths['node/*/edit'] = FALSE;
  $paths['node/*/delete'] = FALSE;
    
}

function love_layout_preprocess_page(&$variables) {
  //module_load_include('inc', 'love_layout', 'love_layout.customs'); 
  module_load_include('inc', 'node', 'node.pages'); 
  module_load_include('inc', 'love_layout', 'love_layout.customs');  
  $variables['add_photo'] = _node_add4love('photo');
  //feedback of webform.
  $node = node_load(19);
  $variables['feedback'] = _node_page_view4love($node);

  //$remaining_invites = invite_get_remaining_invites($user);
  global $user;
  if (module_exists('invite') && invite_get_remaining_invites($user)) {
    $variables['invite_form'] = drupal_get_form('invite_form');
  }
  
  // if(drupal_is_front_page() && !user_is_anonymous() && module_exists('heartbeat_defaults')) {

  //   drupal_add_css(drupal_get_path('module','love_layout').'/css/activities.css');
  //   drupal_add_js(drupal_get_path('module','love_layout').'/js/Scroll_activity.js');
  //   module_load_include('inc','heartbeat','heartbeat.pages');
  //   $heartbeat_messages_page = heartbeat_messages_page('siteactivity');
  //   $variables['heartbeats'] = render($heartbeat_messages_page);
  // }
//tpl
    /*  <?php if (isset($heartbeats)): ?>
  <div id="gg">
    <div class="close"><a href="javascript:void(0)" onclick="jQuery('#gg').slideUp('slow');" title="关闭">×</a>
    <div id="feedb"><a href="activities" title="更多" class="image"><img src="http://www.zoneself.org/wp-content/themes/product/images/feed.gif"></a></div>
    <div class="bulletin">
       <?php print $heartbeats; ?>
    </div>
  </div>
  <?php endif ?>*/
}

function love_layout_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'privatemsg_new') {
    $form['subject']['#access'] = FALSE;
  }
  if($form_id == 'webform_client_form_19') {
    $form['submitted']['email']['#access'] = FALSE;
  }
  if($form_id == 'user_profile_form'){
    $form['picture']['#weight'] = -100;
    $picture = $form['picture'];
    unset($form['picture']);
    array_unshift($form,$picture);
  }



  if($form_id == 'status_node_form'){
    $form['title']['#type'] = 'textarea';
    unset($form['title']['#title']);// = t('我shuo');
    $form['field_status_tags']['#access'] = FALSE;
  }

}

// /**
//  * @see asaf_register_needed_files()
//  */
// function _ajax_register_needed_files(&$form_state, array $files) {
//   if (!isset($form_state['build_info']['files'])) {
//     $form_state['build_info']['files'] = array();
//   }

//   foreach ($files as $file) {
//     if ((is_array($file) && isset($file['module']) || (is_string($file) && file_exists($file)))) {
//       $form_state['build_info']['files'][] = $file;
//     }
//     elseif (is_string($file) && module_exists($file)) {
//       // Loading all includes of the module
//       $path = drupal_get_path('module', $file);
//       $destination = DRUPAL_ROOT . '/' . $path;

//       $pattern ='/.inc$/';
//       $matches = array_keys(file_scan_directory($destination, $pattern));
//       if (is_array($matches)) {
//         foreach ($matches as $inc) {
//           $parts = explode(DRUPAL_ROOT . '/', $inc);
//           if (isset($parts[1]) && $parts[1]) {
//             $form_state['build_info']['files'][] = $parts[1];
//           }
//         }
//       }
//     }
//   }
// }
// when the bug of i18n + og_field   resolve ,can user below.
//http://drupal.org/project/issues/og?text=i18n&status=All&priorities=All&categories=All&version=7.x&component=All
/**
 * hook_form_FORM_ID_alter(&$form, &$form_state, $form_id)
 * when add a new photo,set  group audience default love.
 */
function love_layout_form_photo_node_form_alter(&$form, &$form_state, $form_id) {
  // $form['og_group_ref']['#access'] = FALSE;

  $form['title']['#type'] = 'textarea';
  $form['title']['#title'] = t('文字传情');
  $form['help'] = array(
    '#markup' => t('<div class="publish_help"><span class="publish_photo"><i class="icon-camera"></i>发布照片</span> <span class="publish_status"><i class="icon-comment"></i>真爱大家说</span></div>'),
    '#weight' => -10,
  );
   $form['helps'] = array(
          '#type' => 'radios',
          '#title' => t('展现自我'),
          '#required' => true,
          '#options' => array(t('发布照片'), t('真爱大家说')),
          '#default_value' => 0,
          '#weight' => -10,
          '#prefix' => '<div class="hide">',
          '#suffix' => '</div>',
        );
   // $weibo_config = open_weibo_get_config();
   // $user_config = open_users_get_config();
   // if(!isset($_SESSION['open_weibo_access_token']) && $user_config)
   //  $_SESSION['open_weibo_access_token'] = unserialize($user_config->open_token);

   // dpm($weibo_config,'weibo_config');
   // dpm($user_config,'user_config');
   // if(!$user_config->open_token_expires_in){
   //  dpm('retoken please');
   // }
}
/**
 * Implements hook_user_view().
 * @see statuses_user_view()
 */
function love_layout_user_view_alter(&$build) {
  $build['privatemsg_send_new_message']['#access'] = FALSE;
  global $user;
  if(arg(1)){
    $ac = user_load(arg(1));
    if($user->uid == $ac->uid){
      //$build['privatemsg_send_new_message']['#access'] = FALSE;
      
    }else{
      $build['summary']['#access'] = FALSE;
    }
  }
  //drupal_add_css(drupal_get_path('module', 'love_layout').'/css/profiles.css');
  if (variable_get('statuses_profile', 1)) {
    if (isset($build['statuses'])) {
      unset($build['statuses']);
      //$build['statuses']['#access'] = FALSE;
    }
  }
  $build['profile_main']['#access'] = FALSE;
  $build['profile_believes']['#access'] = FALSE;
  $build['userpoints']['#access'] = FALSE;
  $build['love_intro'] = array(
    '#type' => 'user_profile_item',
    '#title' => '更多精彩，值得期待！',
    '#markup' => '这里还没想好放什么呢，个人相册，所有资料，时间轴～^_^!',
  );
}




/**
 * Implements hook_preprocess_author_pane().
 * @see function user_relationships_preprocess_author_pane(&$variables) {
 *  $variables['account']
 */
function _love_user_relationships_link($variables) {
  // Check if this preprocess needs to be run given who's calling it.
  $output = '';
  global $user;
  $account = $variables['account'];

  // Anonymous users and users viewing their own account won't get a link.
  if (!$user->uid || !$account->uid || $user->uid == $account->uid) {
    return $output;
  }
  // Get a list of selected relationship types
  $all_rtypes = user_relationships_types_load();

  foreach ($all_rtypes as $rtype) {
    $relationships = user_relationships_load(array('requester_id' => $user->uid, 'requestee_id' => $account->uid, 'rtid' => $rtype->rtid));

    if (count($relationships)) {
      // Existing relationship; need remove icon/link. (Despite the foreach,
      // there should only be one.)
      foreach ($relationships as $relationship) {
        $link_label = t('Remove @name from @rel_plural_name', array('@name' => format_username($account), '@rel_plural_name' => $relationship->plural_name));
        $css_class = array(str_replace(' ', '-', $relationship->name), 'author-pane-link', 'user_relationships_popup_link', 'author-relationship-remove-icon');
        //link to remove
        if (!isset($variables['user_relationships'])) {
          $variables['user_relationships'] = '';
        }
        $variables['user_relationships'] .= '<div class="author-pane-ur-link-item">';
        $variables['user_relationships'] .=
          l('<span>' . t('Remove @rel_name', array('@name' => format_username($account), '@rel_name' => ur_tt("user_relationships:rtid:$relationship->rtid:name", $relationship->name))) . '</span>',
          "user/{$user->uid}/relationships/{$relationship->rid}/remove",
          array(
                'query' => drupal_get_destination(),
                'html' => TRUE,
                'attributes'  => array('title' => $link_label, 'class' => $css_class),
          ));
        $variables['user_relationships'] .= '</div>';
      }
    }
    else {
      //No existing relationship; need an add icon/link.
      if (!user_relationships_can_request($user, $rtype) || !user_relationships_can_receive($account, $rtype)) {
        continue;
      }
      $css_class = array(str_replace(' ', '-', $rtype->name), 'author-pane-link', 'user_relationships_popup_link', 'author-relationship-remove-icon');
      //add link
      if (!isset($variables['user_relationships'])) {
        $variables['user_relationships'] = '';
      }
      $variables['user_relationships'] .= '<div class="author-pane-ur-link-item">';
      $variables['user_relationships'] .=
        l('<span>' . t('Add @rel_name', array('@name' => format_username($account), '@rel_name' => ur_tt("user_relationships:rtid:$rtype->rtid:name", $rtype->name))) . '</span>',
          "relationship/{$account->uid}/request/{$rtype->rtid}",
          array(
            'query' => drupal_get_destination(),
            'html' => TRUE,
            'attributes'  => array(
              'title' => t('Become @name\'s @rel_name', array('@name' => format_username($account), '@rel_name' => ur_tt("user_relationships:rtid:$rtype->rtid:name", $rtype->name))),
              'class' => $css_class
            ),
          )
        );
      $variables['user_relationships'] .= '</div>';
    }
    //$output .= $variables['user_relationships'];
  }
  return $variables['user_relationships'];
}
function ur_tt($name, $string, $langcode = NULL, $update = FALSE) {
  if (module_exists('i18nstrings')) {
    return tt($name, $string, $langcode, $update);
  }
  else {
    return $string;
  }
}

//book node type css and js
function love_layout_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'book' && $view_mode == 'full') {
    // drupal_add_css(drupal_get_path('module','love_layout').'/book/css/jquery.jscrollpane.custom.css');  
    // drupal_add_css(drupal_get_path('module','love_layout').'/book/css/bookblock.css');
    // drupal_add_css(drupal_get_path('module','love_layout').'/book/css/custom.css');
    // drupal_add_css(drupal_get_path('module','love_layout').'/book/css/bookblock.css');  

    // drupal_add_js(drupal_get_path('module','love_layout').'/book/js/modernizr.custom.79639.js');
    // drupal_add_js(drupal_get_path('module','love_layout').'/book/js/jquery.mousewheel.js');
    // drupal_add_js(drupal_get_path('module','love_layout').'/book/js/jquery.jscrollpane.min.js');
    // drupal_add_js(drupal_get_path('module','love_layout').'/book/js/jquerypp.custom.js');
    // drupal_add_js(drupal_get_path('module','love_layout').'/book/js/jquery.bookblock.js');
    // drupal_add_js(drupal_get_path('module','love_layout').'/book/js/page.js');
  }
  if($node->type == 'photo') {
    // drupal_set_message(t('For now, you can see the comment page! will go the front page!'), 'status', FALSE);
    // drupal_goto('<front>');
  }
}
/**
 * Implements hook_views_pre_build().
 */
function love_layout_views_pre_build(&$view) {
  // add form for status.
  if ($view->name == 'status' && $view->current_display == 'page_status_all') {
    module_load_include('inc', 'node', 'node.pages'); 
    module_load_include('inc', 'love_layout', 'love_layout.customs');  
    $form['add_status'] = _node_add4love('status');
    $view->attachment_before = drupal_render($form['add_status']);
  }

  if($view->name == 'index' && $view->current_display == 'page_image'){
    drupal_add_js(drupal_get_path('module', 'love_layout').'/wookmark/libs/jquery.imagesloaded.js');
    drupal_add_js(drupal_get_path('module', 'love_layout').'/wookmark/jquery.wookmark.js');
    drupal_add_js(drupal_get_path('module', 'love_layout').'/js/index-photo-image.js');

    drupal_add_js(drupal_get_path('module', 'love_layout').'/wookmark/libs/jquery.colorbox-min.js');
    drupal_add_css(drupal_get_path('module', 'love_layout').'/wookmark/example-lightbox/css/colorbox.css');

    drupal_add_css(drupal_get_path('module', 'love_layout').'/css/index-photo-image.css');
  }
}

/**
 * Implements hook_node_presave().
 */
function love_layout_node_presave($node) {
  if($node->type == 'status' || $node->type == 'photo') {

   $pattern = '/#([^\\#|.]+)#|＃([^\\＃|.]+)＃/';
   preg_match_all($pattern, $node->title, $matches, PREG_SET_ORDER);
   $node->field_status_tags[LANGUAGE_NONE] = array();
   foreach ($matches as $key => $value) {

      $term_name = $value[1];
      $term = taxonomy_get_term_by_name($term_name);
      //new one
      if(!count($term)){
       $term = new stdClass();
       $term->vid = 1;
       $term->name = $term_name;
       taxonomy_term_save($term);
       //$term = taxonomy_get_term_by_name($term_name);
       foreach ($term as $value) {
          //dpm($value,$key);
          $node->field_status_tags[LANGUAGE_NONE][$term->tid]['tid'] = $term->tid;
        }
      }else{
        foreach ($term as $tid => $value) {
          // dpm($value,$tid);
          $node->field_status_tags[LANGUAGE_NONE][$tid]['tid'] = $tid;
        }
      }
   }
  }
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function love_layout_form_status_node_form_alter(&$form, &$form_state, $form_id) {

    $files = array('node');
    _ajax_register_needed_files($form_state,  $files);
    // !$form['title']['#default_value'] mean not the edit form.
    if (!$form['title']['#default_value'] && !isset($form['actions']['submit']['#ajax'])) {
      $form['actions']['submit']['#ajax'] = array(
          'callback' => '_ajax_status_submit_js',
          'wrapper' => 'views-status-rows',
          'method' => 'replace',
          'effect' => 'fade',
        );
    }
}


 /**
 * Builds the answer node.
 * @see druedu_qa_ajax_comments_submit_js
 * TODO: for status sumbit
 */
function _ajax_status_submit_js($form, &$form_state) {
  // Return the actual form if it contains errors.
  if (form_get_errors()) {
    return $form;
  }
  // $commands = ajax_command_remove('.vertical-tabs');
  // return array('#type' => 'ajax', '#commands' => $commands);



  //$notify_text = variable_get('ajax_comments_notify', '') ? theme('ajax_comments_notify_text') : '';
  // $text = t('Your answer has been posted.');
  // $status = 'status';
  // unset($_SESSION['messages']['status']);
  // $notify_text = '<div id="messages"><div class="clearfix"><div class="messages ajax-comments ' . $status . '"><h2 class="element-invisible">Status message</h2>' . $text . '</div></div></div>';
  //TODO: where is $notify_text ?
  // Don't display as a preview as this is being submitted.
  ////unset($comment_build['comment_body']['#object']->in_preview);

  // Are we editing a comment.
  {
    // Append comment to root comment wrapper.
    // $question_nid = $node->field_answer[LANGUAGE_NONE][0]['target_id'];
    // //system/ajax bug fix.
    // $_GET['destination']='node/'.$node->nid;
    $views = views_embed_view('status');//,'page_status_all'
    {
      //  $commands[] = ajax_comman.d_remove('.view-display-id-answers_attachment .attachment-before');
      //  $views = '<div class="attachment attachment-before">
      // <h3>'.format_plural($question->field_computed_answers[LANGUAGE_NONE][0]['value'], '1 answer', '@count answers').'</h3>    </div>'.$views;
    }
    $commands[] = ajax_command_invoke(NULL, 'emptyTextarea');
    $commands[] = ajax_command_html('#views-status-rows', $views);
    return array('#type' => 'ajax', '#commands' => $commands);
    //If we have a default form, update it with a new one.
    // Otherwise, delete it.
   {
    //  $commands[] = ajax_command_remove('#' . $form['#id']);
    }
  }
}